//  prog5_HarmanjotSingh.js:  3D Solar System
//  Harmanjot Singh
//  11/15/2016

//  This program displays a kind of solar system
//  where different objects rotate about the sun and
//  also about there own axis. here in this program quanterion are used to perform the
//  multiplication rather than computing the rotation as matrix multiplication.

//  Vertex shader program

var VSHADER_SOURCE =
'attribute vec4 a_Position;\n' +
'attribute vec4 a_Normal;\n' +
'uniform mat4 u_MvpMatrix;\n' +
'uniform mat4 u_NormalMatrix;\n' +
'varying vec4 v_Color;\n' +
'void main() {\n' +
    '  gl_Position =  u_MvpMatrix * a_Position;\n' +
    
    // Shading calculation to make the arm look three-dimensional
    
    '  vec3 lightDirection = normalize(vec3(0.0, 0.5, 0.7));\n' + // Light direction
    '  vec4 color = vec4(1.0, 0.0, 0.0, 1.0);\n' + // Robot color
    '  vec3 normal = normalize((u_NormalMatrix * a_Normal).xyz);\n' +
    '  float nDotL = max(dot(normal, lightDirection), 0.0);\n' +
    '  v_Color = vec4(color.rgb * nDotL + vec3(0.1), color.a);\n' +
'}\n';

// Fragment shader program

var FSHADER_SOURCE =
'#ifdef GL_ES\n' +
'precision mediump float;\n' +
'#endif\n' +
'varying vec4 v_Color;\n' +
'void main() {\n' +
    '  gl_FragColor = v_Color;\n' +
'}\n';

"use strict";
//  Global variables:

var orientation_axis = [1.0,1.0,1.0];
var location_axis = [0,0.0,1.0,0.0];
var r=1;                                 // radius of the view volume
var xc=0,yc=0,zc=0;                      // center point
var s=0.5;							     // scaling factor
var ANGLE = 0.0; 					     // starting angle
var pitch,yaw,roll;
/******************************************************************************/

function main() {
    
    // Retrieve <canvas> element
    
    var canvas = document.getElementById('webgl');
    
    // Get the rendering context for WebGL
    
    var gl = getWebGLContext(canvas);
    if (!gl) {
        console.log('Failed to get the rendering context for WebGL');
            return;
    }
    
    // Initialize shaders
    
    if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
        console.log('Failed to intialize shaders.');
        return;
    }
    
    // Set the vertex information
    
    var n = initVertexBuffers(gl);
    if (n < 0) {
        console.log('Failed to set the vertex information');
        return;
    }
    
    // Set the clear color and enable the depth test
    
    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    
    // enabling the depth
    
    gl.enable(gl.DEPTH_TEST);
    
    // Get the storage locations of uniform variables
    
    var u_MvpMatrix = gl.getUniformLocation(gl.program, 'u_MvpMatrix');
    
    var u_NormalMatrix = gl.getUniformLocation(gl.program, 'u_NormalMatrix');
    if (!u_MvpMatrix || !u_NormalMatrix) {
        console.log('Failed to get the storage location');
        return;
    }
    
    // Calculate the view projection matrix
    
    var viewProjMatrix = new Matrix4();
    
  
  
    
    document.onkeydown = function(ev) {
        keydown(ev, gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix,e);
    };
    
    
    
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    
    
    
    draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix,e);
    //  Define animation function
}

var ANGLE_STEP = 5.0;   // The increments of rotation angle (degrees)
// For rotation about x axis (degrees)
var e = [1.0,0.0,0.0];

function keydown(ev, gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix,e) {
    switch (ev.keyCode) {
        case 40: // Up arrow key -> the positive rotation around the x-axis
        e = [1.0,0.0,0.0];
        ANGLE_STEP =  ANGLE_STEP;
        break;
        case 38: // Down arrow key -> the negative rotation around the x-axis
        e = [1.0,0.0,0.0];
        ANGLE_STEP =  -ANGLE_STEP;
        break;
        case 39: // Right arrow key -> the positive rotation around the y-axis
        e = [0.0,1.0,0.0];
        ANGLE_STEP =  ANGLE_STEP;
        break;
        case 37: // Left arrow key -> the negative rotation around the y-axis
        e = [0.0,1.0,0.0];
        ANGLE_STEP =  -ANGLE_STEP;
        break;
        case 43: // '+' key -> to zoom out
        s = s/2;
        break;
        case 45: // '-' key -> to zoom in
        s = s * 2;
        break;
        case 120: //for x
        pitch = (pitch + 5)%360;
        break;
        case 88: // for X
        pitch = (pitch - 5)%360;
        break;
        case 121: //for y
        yaw = (yaw + 5)%360;
        break;
        case 89: // for Y
        yaw = (yaw - 5)%360;
        break;
        case 122: // for z
        roll = (roll - 5)%360;
        break;
        case 90: // for X
        roll = (roll - 5)%360;
        break;
        default:
        return; // Skip drawing at no effective action
    }
    // Draw
    draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix,e);
}




/******************************************************************************/

function initVertexBuffers(gl) {
    
    // Create a sphere
    
    var SPHERE_DIV = 15;
    
    var i, ai, si, ci;
    var j, aj, sj, cj;
    var p1, p2;
    
    var positions = [];
    var indices = [];
    
    // Generate coordinates
    
    for (j = 0; j <= SPHERE_DIV; j++) {
        aj = j * Math.PI / SPHERE_DIV;
        sj = Math.sin(aj);
        cj = Math.cos(aj);
        for (i = 0; i <= SPHERE_DIV; i++) {
            ai = i * 2 * Math.PI / SPHERE_DIV;
            si = Math.sin(ai);
            ci = Math.cos(ai);
            
            positions.push(si * sj); // X
            positions.push(cj); // Y
            positions.push(ci * sj); // Z
        }
    }
    
    // Generate indices
    
    for (j = 0; j < SPHERE_DIV; j++) {
        for (i = 0; i < SPHERE_DIV; i++) {
            p1 = j * (SPHERE_DIV + 1) + i;
            p2 = p1 + (SPHERE_DIV + 1);
            
            indices.push(p1);
            indices.push(p2);
            indices.push(p1 + 1);
            
            indices.push(p1 + 1);
            indices.push(p2);
            indices.push(p2 + 1);
        }
    }
    
    // Write the vertex property to buffers (coordinates and normals)
    // Same data can be used for vertex and normal
    // In order to make it intelligible, another buffer is prepared separately
    
    if (!initArrayBuffer(gl, 'a_Position', new Float32Array(positions), gl.FLOAT, 3)) return -1;
    if (!initArrayBuffer(gl, 'a_Normal', new Float32Array(positions), gl.FLOAT, 3)) return -1;
    
    // Unbind the buffer object
    
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    
    // Write the indices to the buffer object
    
    var indexBuffer = gl.createBuffer();
    if (!indexBuffer) {
        console.log('Failed to create the buffer object');
        return -1;
    }
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);
    
    return indices.length;
}
// end of initVertexBuffers

/******************************************************************************/

function initArrayBuffer(gl, attribute, data, type, num) {
    
    // Create a buffer object
    
    var buffer = gl.createBuffer();
    if (!buffer) {
        console.log('Failed to create the buffer object');
        return false;
    }
    // Write date into the buffer object
    
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
    
    // Assign the buffer object to the attribute variable
    
    var a_attribute = gl.getAttribLocation(gl.program, attribute);
    if (a_attribute < 0) {
        console.log('Failed to get the storage location of ' + attribute);
        return false;
    }
    gl.vertexAttribPointer(a_attribute, num, type, false, 0, 0);
    
    // Enable the assignment of the buffer object to the attribute variable
    
    gl.enableVertexAttribArray(a_attribute);
    
    return true;
}
// end of initArrayBuffer

// Coordinate transformation matrix

var g_modelMatrix = new Matrix4(),
g_mvpMatrix = new Matrix4();

/******************************************************************************/
function draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix,e) {
    
    // Clear color and depth buffer
    
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    
    //Draw the Sun
	
    g_modelMatrix.setRotate(ANGLE, orientation_axis[0], orientation_axis[1], orientation_axis[2]);
    
    // convert the axis angle pair to quanterion
	
    var q = to_quat(ANGLE,orientation_axis);
    
    var p = to_quat(ANGLE_STEP,e);
	
    // converting to get the inverse of p matrix
	
    var s = conjugate(p);
	
    // Multiply quanterion
	
    var r = multiplyQuaternion(p,q);
    var t = multiplyQuaternion(r,s);
	
    // change back to the angle axis pair
	
    var pair = to_ang_axis(t);
    
    ANGLE = pair[0];
    console.log(ANGLE);
    orientation_axis = [pair[1],pair[2],pair[3]];
    
    //setting the new co ordinates for rotation.
	
    g_modelMatrix.rotate(ANGLE, orientation_axis[0], orientation_axis[1], orientation_axis[2]);
    g_modelMatrix.translate(0.0,0.0,-70);
    g_modelMatrix.rotate(ANGLE, location_axis[0], location_axis[1], location_axis[2]);
    drawSphere(gl, n, 3.0, 3.0, 3.0, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);
    
    pushMatrix(g_modelMatrix);
    
    q = to_quat(ANGLE,orientation_axis);
    p = to_quat(ANGLE_STEP,e);
    s = conjugate(p);
    r = multiplyQuaternion(p,q);
    t = multiplyQuaternion(r,s);
    pair = to_ang_axis(t);
    
    ANGLE = pair[0];
    console.log(ANGLE);
    orientation_axis = [pair[1],pair[2],pair[3]];
    
    g_modelMatrix.rotate(ANGLE, orientation_axis[0], orientation_axis[1], orientation_axis[2]);
    g_modelMatrix.translate(5, 8, 0.0);
    g_modelMatrix.setRotate(ANGLE, orientation_axis[0], orientation_axis[1], orientation_axis[2]);
    g_modelMatrix.translate(0.0,0.0,-70);
    drawSphere(gl, n, 1.0, 1.0, 1.0, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);
    
    
    
    
    //Draw next object for spiral motion
    
    
    
    g_modelMatrix = popMatrix();
    // Save the matrix
    
    
}
// end of draw

/******************************************************************************/

// Array for storing a matrix

var g_matrixStack = [];

// Store the specified matrix to the array

function pushMatrix(m) {
    var m2 = new Matrix4(m);
    g_matrixStack.push(m2);
}
/******************************************************************************/
function popMatrix() {
    
    // Retrieve the matrix from the array
    
    return g_matrixStack.pop();
}

// Coordinate transformation matrix for normals

var g_normalMatrix = new Matrix4();

/******************************************************************************/

// Draw the spheres

function drawSphere(gl, n, width, height, depth, viewProjMatrix, u_MvpMatrix, u_NormalMatrix) {
    
    pushMatrix(g_modelMatrix); // Save the model matrix
    
    viewProjMatrix.setFrustum(xc-s*r, xc+s*r, yc-s*r, yc+s*r,1.0, 100.0);
    g_modelMatrix.scale(width, height, depth);
    
    // Calculate the model view project matrix and pass it to u_MvpMatrix
    
    g_mvpMatrix.set(viewProjMatrix);
    
    g_mvpMatrix.multiply(g_modelMatrix);
    
    gl.uniformMatrix4fv(u_MvpMatrix, false, g_mvpMatrix.elements);
 
    // Calculate the normal transformation matrix and pass it to u_NormalMatrix
    
    g_normalMatrix.setInverseOf(g_modelMatrix);
    g_normalMatrix.transpose();
    gl.uniformMatrix4fv(u_NormalMatrix, false, g_normalMatrix.elements);
    
    // Draw
    
    gl.drawElements(gl.TRIANGLES, 2 * n, gl.UNSIGNED_BYTE, 0);
    g_modelMatrix = popMatrix(); // Retrieve the model matrix
}

/******************************************************************************/


function to_quat(S_Angle, a)
{
    var  w = S_Angle, x = a[0], y = a[1], z = a[2];
    var  out = [];
    var  half_angle = (S_Angle * 0.5) * 3.14159 / 180.0;
    
    out[0] = Math.cos(half_angle);
    out[1] = x * Math.sin(half_angle);
    out[2] = y * Math.sin(half_angle);
    out[3] = z * Math.sin(half_angle);
    
    return out;
    
}


function multiplyQuaternion(a, b) {
    var w = a[0], x = a[1], y = a[2], z = a[3],
    W = b[0], X = b[1], Y = b[2], Z = b[3],
    out = [];
    
    out[0] = w*W - x*X - y*Y - z*Z;
    out[1] = w*X + x*W + y*Z - z*Y;
    out[2] = w*Y - x*Z + y*W + z*X;
    out[3] = w*Z + x*Y - y*X + z*W;
    
    return out;
}

function to_ang_axis(r)
{
    var pair = [];
    var u = [];
    var theta = 2* Math.acos(r[0]);
    u =[r[1],r[2],r[3]];
    u = normalize(u);
    pair = [theta,u[0],u[1],u[2]];
    
    return pair;
    
}



function normalize(tn) {
    
    var c = tn[0], d = tn[1], e = tn[2], g = Math.sqrt(c * c + d * d + e * e);
    
    if (g == 0) {
        return tn;
    } else {
        g = 1 / g;
        tn[0] = c * g;
        tn[1] = d * g;
        tn[2] = e * g;
        return tn;
    }
    
}

function conjugate(tn) {
    
    var c = tn[0], d = tn[1], e = tn[2],f=tn[3], g = Math.sqrt(c * c + d * d + e * e + f * f);
    
    if (g == 0) {
        return tn;
    } else {
        g = 1 / g;
        tn[0] = -c * g;
        tn[1] = -d * g;
        tn[2] = -e * g;
        tn[3] = -f * g;
        return tn;
    }
    
}